// Generated by CoffeeScript 1.6.2
var Deleter, LOGGING, SOCKET_ADDRESS, Sign, Signifier, SignifierHelpers, Walkthrough, log,
  __slice = [].slice;

LOGGING = true;

SOCKET_ADDRESS = "http://larry.chatlands.com:7000";

log = function() {
  var item, logs, _i, _len, _results;

  logs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  if (LOGGING) {
    _results = [];
    for (_i = 0, _len = logs.length; _i < _len; _i++) {
      item = logs[_i];
      _results.push(console.log(item));
    }
    return _results;
  }
};

Signifier = {
  signs_found: false,
  activate: function() {
    var socket,
      _this = this;

    log("made it to Signifier.activate()!");
    window.body = document.body;
    this.socket = socket = io.connect(SOCKET_ADDRESS);
    Sign.socket = socket;
    return socket.on("whereYat", function(data) {
      log("whereYat recieved!");
      return _this.getNeighborhood();
    });
  },
  deleteEntireDatabase: function() {
    if (!this.socket.emit) {
      this.activate();
    }
    return this.socket.emit("deleteTheWholeShebang");
  },
  findLink: function(link, elt) {
    var $child, $elt, checkChildren, text;

    if (elt == null) {
      elt = document.body;
    }
    text = link.margin;
    if (!($elt = $(elt)).filter(":contains(" + text + ")").length) {
      return null;
    }
    $child = $elt;
    checkChildren = function() {
      return $child.children(":contains(" + text + ")");
    };
    while ($child.length) {
      ($child = checkChildren()).length && ($elt = $child);
    }
    return $elt[0];
  },
  findTextNode: function(str, node) {
    var child, text, _i, _len, _ref;

    _ref = node.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (!((text = child.textContent) && typeof text.indexOf === "function" && text.indexOf(str) >= 0)) {
        continue;
      }
      while (child.nodeType !== 3) {
        log("Went a level deeper with findTextNode");
        return this.findTextNode(str, child);
      }
      log(child);
      return {
        node: child,
        index: child.data.indexOf(str)
      };
    }
  },
  getNeighborhood: function() {
    var _this = this;

    this.socket.emit("chillinAt", {
      host: window.location.hostname,
      path: window.location.pathname
    });
    return this.socket.on("heresYourHood", function(response) {
      log("response from heresYourHood!", response);
      return _this.unpackResponse(response);
    });
  },
  handleMutations: function(mutations) {
    var length, link, mutation, new_ones, _i, _len, _results;

    mutations = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = mutations.length; _i < _len; _i++) {
        mutation = mutations[_i];
        if ((length = mutation.addedNodes.length)) {
          _results.push(mutation);
        }
      }
      return _results;
    })();
    new_ones = false;
    if (mutations.length && new_ones) {
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        _results.push(this.processLink(link));
      }
      return _results;
    }
  },
  makeLink: function(link, elt) {
    var end_info, range, start_info, wrapper,
      _this = this;

    range = document.createRange();
    start_info = this.findTextNode(link.startText || link.text, elt);
    end_info = this.findTextNode(link.endText || link.text, elt);
    log("here is our link info", start_info, end_info);
    range.setStart(start_info.node, start_info.index);
    range.setEnd(end_info.node, end_info.index + (link.endText || link.text).length);
    wrapper = document.createElement("a");
    wrapper.href = link.url;
    wrapper.target = "_blank";
    range.surroundContents(wrapper);
    $(wrapper, wrapper.parentElement).addClass("signifier").filter(wrapper).data("sigId", link._id).data("sigRev", link._rev);
    if (this.signs_found !== true) {
      chrome.extension.sendMessage({
        signStatus: true
      }, function(response) {
        log(response);
        return _this.signs_found = true;
      });
    }
    return link;
  },
  processLink: function(link) {
    var elt;

    if (elt = this.findLink(link)) {
      log(elt);
      this.makeLink(link, elt);
      return this.updateLinks(link);
    }
  },
  updateLinks: function(link) {
    var i, links;

    links = this.links;
    i = links.indexOf(link);
    this.links = links.slice(0, i).concat(links.slice(i + 1, length));
    return this.links;
  },
  unpackResponse: function(response) {
    var link, links, observer, row, sig_id, targets, _i, _len;

    this.response = response;
    this.links = links = (function() {
      var _i, _len, _ref, _results;

      if (Array.isArray((this.response || {}).rows)) {
        _ref = response.rows;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push(row.value);
        }
        return _results;
      } else {
        return null;
      }
    }).call(this);
    if (!response) {
      return;
    }
    for (_i = 0, _len = links.length; _i < _len; _i++) {
      link = links[_i];
      this.processLink(link);
    }
    sig_id = 0;
    targets = [];
    observer = new WebKitMutationObserver(this.handleMutations);
    return observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
};

Sign = (function() {
  Sign.findContainingChild = function(parent, elt) {
    var child, _i, _len, _ref;

    _ref = parent.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.contains(elt)) {
        return child;
      }
    }
  };

  Sign.getChildIndex = function(elt) {
    var e, k;

    e = elt;
    k = 0;
    while (e = e.previousSibling) {
      ++k;
    }
    return k;
  };

  Sign.getOffsetToNode = function(parent, elt) {
    var a, child, goddamn, offset;

    if (parent === elt) {
      log("returning without reducing");
      return 0;
    } else {
      goddamn = (function() {
        var _i, _len, _ref, _results;

        _ref = parent.childNodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          _results.push(a);
        }
        return _results;
      })();
      child = Sign.findContainingChild(parent, elt);
      offset = _.foldl(goddamn.slice(0, Sign.getChildIndex(child)), (function(memo, node) {
        return memo + node.textContent.length;
      }), 0);
      if (elt.parentNode !== parent) {
        offset += Sign.getOffsetToNode(Sign.findContainingChild(parent, elt), elt);
      }
      log("offset being returned from @getOffsetToNode is: " + offset);
      return offset;
    }
  };

  Sign.getMargin = function(range) {
    var endOffset, left, right, send, startOffset;

    log("range is =", range);
    startOffset = Sign.getOffsetToNode(range.commonAncestorContainer, range.startContainer) + range.startOffset;
    log("startOffset = " + startOffset);
    endOffset = Sign.getOffsetToNode(range.commonAncestorContainer, range.endContainer) + range.endOffset;
    log("endOffset = " + endOffset);
    left = Math.max(0, startOffset - 10);
    right = Math.min(range.commonAncestorContainer.textContent.length, endOffset + 10);
    log("here is the index of our margin", [left, right], "here is range.commonAncestorContainer.textContent", range.commonAncestorContainer.textContent, "here is our margin!", {
      multiline: true
    });
    log((send = range.commonAncestorContainer.textContent.slice(left, right)));
    return send;
  };

  function Sign(url) {
    var end, endStr, error, parent, range, sel, start, startStr, thing, _ref, _ref1, _ref2;

    if (url == null) {
      url = null;
    }
    sel = document.getSelection();
    log("made it to the try");
    try {
      if (sel.type !== "Range") {
        alert("no selection!");
        return;
      }
      range = sel.getRangeAt(0);
      if ((parent = this.parent = range.commonAncestorContainer).nodeType === 3) {
        parent = this.parent = parent.parentElement;
      }
      if (range.startContainer.parentElement !== range.endContainer.parentElement) {
        alert("select something simpiler");
        return;
      }
      if ((range.startContainer.nodeType !== 3) || (range.endContainer.nodeType !== 3)) {
        alert("we only can select text to turn to links for right now");
        return;
      }
    } catch (_error) {
      error = _error;
      throw error;
    }
    if (!url) {
      url = prompt("give link url", "http://www.awebsite.com");
    }
    if (url == null) {
      return;
    }
    log("made it past the try");
    _ref = range = sel.getRangeAt(0), start = _ref.startContainer, (_ref1 = _ref.startContainer, startStr = _ref1.textContent), end = _ref.endContainer, (_ref2 = _ref.endContainer, endStr = _ref2.textContent);
    this.toDB = {
      tag: parent.tagName,
      text: range.toString(),
      startText: range.toString(),
      endText: range.toString(),
      margin: Sign.getMargin(range),
      url: url,
      host: document.location.hostname,
      path: document.location.pathname
    };
    if (range.startContainer !== range.endContainer) {
      log("trying to slice each container");
      this.toDB.startText = startStr.slice(range.startOffset, startStr.length + 1);
      this.toDB.endText = endStr.slice(0, range.endOffset);
    }
    log("" + this.toDB.startText + " is startText, " + this.toDB.endText + " is endText");
    thing = document.createElement('a');
    thing.href = url;
    thing.target = '_blank';
    range.surroundContents(thing);
    $(thing).addClass("signifier");
    $(parent).addClass("signifier");
    Sign.socket.emit("heresASign", this.toDB);
  }

  Sign.activate = function() {
    log("made it to Sign.activate()");
    chrome.extension.sendMessage({
      greeting: "activated"
    }, function(response) {
      log("sent activated message to background script!");
      if (response.farewell === "runWalkthrough") {
        return Walkthrough.activate();
      }
    });
    return chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {
      var gogglesSign, makeSign, removeSign;

      makeSign = function() {
        var sign;

        return sign = new Sign();
      };
      removeSign = function() {
        return Deleter.removeSigsInSel();
      };
      gogglesSign = function() {
        var sign;

        return sign = new Sign("javascript: (function () { if (window.goggles && window.goggles.active) window.goggles.stop(); else { window.GOGGLE_SERVER='http://goggles.sneakygcr.net/page'; var scr = document.createElement('script'); scr.type = 'text/javascript'; scr.src = 'http://goggles.sneakygcr.net/bookmarklet.js?rand='+Math.random(); document.documentElement.appendChild(scr); } })();");
      };
      if (request.greeting === "makeSign") {
        makeSign();
      }
      if (request.greeting === "removeSign") {
        removeSign();
      }
      if (request.greeting === "gogglesSign") {
        return gogglesSign();
      }
    });
  };

  return Sign;

}).call(this);

Deleter = (function() {
  function Deleter() {}

  Deleter.removeSigsInSel = function() {
    var a, b, id, parent, range, rev, sel, _i, _len, _ref, _results;

    sel = document.getSelection();
    range = sel.getRangeAt(0);
    parent = range.commonAncestorContainer;
    _ref = $(parent).find("a.sig");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      if (sel.containsNode(a)) {
        id = $(a).data('sigId');
        rev = $(a).data('sigRev');
        b = a.childNodes[0];
        $(b).unwrap();
        Signifier.socket.emit('delete', {
          id: id,
          rev: rev
        });
        _results.push(log("sig attempted to be deleted", a));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Deleter;

})();

Walkthrough = (function() {
  function Walkthrough() {}

  Walkthrough.activate = function() {
    var dialog;

    dialog = $("<div id='sigDialog'>").attr("title", "Welcome to Signifier!").appendTo(document.body);
    $("<p>").html("To begin,\n<ol>\n<li>Highlight any text on this page.</li>\n<li>Click the sig button in the upper right hand corner of your browser.</li>\n<li>Click the make sign button</li>\n<li>Copy and paste your url into the dialog box.</li>\n</ol>").appendTo(dialog);
    return dialog.dialog();
  };

  return Walkthrough;

})();

SignifierHelpers = (function() {
  function SignifierHelpers() {}

  SignifierHelpers.getTextNodes = function(elt) {
    var SAT;

    SAT = function(node) {
      var results, sn, temp, _ref;

      if (node.nodeType === 3) {
        return node;
      } else {
        results = (_ref = []).concat.apply(_ref, (function() {
          var _i, _len, _ref, _results;

          _ref = node.childNodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sn = _ref[_i];
            if ((temp = SAT(sn)).length) {
              _results.push(temp);
            }
          }
          return _results;
        })());
        return results;
      }
    };
    return SAT(elt);
  };

  SignifierHelpers.addUpTextLengths = function(txtNodeArr) {
    var a, r, _i, _len;

    r = 0;
    for (_i = 0, _len = txtNodeArr.length; _i < _len; _i++) {
      a = txtNodeArr[_i];
      r += a.textContent.length;
    }
    return r;
  };

  SignifierHelpers.getTextNodeFromIndex = function(arr, num) {
    var i, r;

    r = 0;
    i = 0;
    while ((r += arr[i].textContent.length) < num) {
      ++i;
    }
    return arr[i];
  };

  SignifierHelpers.getIndexOfContainingChild = function(parent, node) {
    var arr, child;

    arr = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Array, parent.childNodes, function(){});
    child = arr[0];
    while (!(typeof child.contains === "function" ? child.contains(node) : void 0)) {
      child = child.nextSibling;
    }
    return child;
  };

  return SignifierHelpers;

})();

$(function() {
  Signifier.activate();
  Sign.activate();
  return log("Signifier activated");
});
