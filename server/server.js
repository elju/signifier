// Generated by CoffeeScript 1.6.2
var DB_NAME, LOGGING, SOCKET_IO_PORT, Signifier, db, io, nano;

SOCKET_IO_PORT = 7000;

io = require('socket.io').listen(SOCKET_IO_PORT);

nano = require('nano')('http://127.0.0.1:5984');

DB_NAME = "signifier";

db = nano.use(DB_NAME);

LOGGING = true;

Signifier = (function() {
  function Signifier(socket) {
    this.socket = socket;
  }

  Signifier.prototype.scoutHood = function(imAt) {
    var _this = this;

    if (LOGGING) {
      console.log("querying db with [host,path] = ");
      console.log([imAt.host, imAt.path]);
    }
    return db.view('signifier', 'neighborhood', {
      keys: [[imAt.host, imAt.path]]
    }, function(err, signs) {
      if (err) {
        console.log(err);
      } else if (LOGGING) {
        console.log(signs);
      }
      if (LOGGING) {
        console.log(_this);
      }
      if (LOGGING) {
        console.log(_this.socket);
      }
      return _this.socket.emit("heresYourHood", signs);
    });
  };

  Signifier.prototype.deleteAllDocs = function() {
    return db.view('signifier', 'neighborhood', function(err, body) {
      var doc, key, _i, _len, _ref;

      if (err) {
        console.log(err);
        return;
      }
      _ref = body.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        doc = key.value;
        db.destroy(doc._id, doc._rev, function(err, body) {
          return console.log(err || (LOGGING ? body : void 0));
        });
      }
      if (LOGGING) {
        return console.log("database purged successfully!");
      }
    });
  };

  return Signifier;

})();

io.sockets.on('connection', function(socket) {
  var address, sig;

  sig = new Signifier(socket);
  address = socket.handshake.address;
  if (LOGGING) {
    console.log("here is the address!: ");
    console.log(address);
  }
  socket.emit('whereYat', {
    header: null
  });
  if (LOGGING) {
    console.log('whereYat just sent');
  }
  socket.on('chillinAt', function(imAt) {
    return sig.scoutHood(imAt);
  });
  socket.on("heresASign", function(sign) {
    sign.creator = {
      ip: socket.handshake.address.address
    };
    return db.insert(sign, function(err, body, headers) {
      if (err) {
        return console.log(headers, body);
      } else {
        return console.log(err);
      }
    });
  });
  socket.on("delete", function(sig) {
    db.destroy(sig.id, sig.rev, function(err, body) {});
    if (LOGGING) {
      console.log(body);
      if (!err) {
        return console.log("sig successfully deleted");
      } else {
        return err;
      }
    }
  });
  return socket.on("deleteTheWholeShebang", function() {
    return sig.deleteAllDocs();
  });
});
